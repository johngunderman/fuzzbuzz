#!/usr/bin/env python
# -*- coding: utf-8 -*-
#Author: Tim Henderson
#Email: tim.tadh@hackthology.com
#For licensing see the LICENSE file in the top level directory.

import os, sys
from getopt import getopt, GetoptError

import fuzzbuzz

VERSION = 'git master'

error_codes = {
    'usage':1,
    'file_not_found':2,
    'option':3,
    'args':4,
    'version':5,
    'bad_bool':6,
    'no_args':7,
    'requirements':8,
    'bad_module':9,
    'list_engines':10,
    'file_instead_of_dir':11,
    'bad_engine':12,
}

usage_message = \
'''usage: fuzzbuzz -g <file> -r <module> [Extra Options]'''

extended_message = \
'''
Options

    -h, help                            print this message
    -v, version                         print the version
    -g, grammar=<file>                  supply an attribute grammar to fuzz
    -r, reverse-lexer=<module>          supply the module (on PYTHONPATH) which
                                        contains a reverse lexer for the given
                                        grammar
    -e, engine=<engine-name>            what engine should be used
                                        [defaults to "attribute_fuzzer"]
    -E, list-engines                    list the available engines
'''


def log(*msgs):
    for msg in msgs:
        print >>sys.stderr, msg,
    print >>sys.stderr
    sys.stderr.flush()

def output(*msgs):
    for msg in msgs:
        print >>sys.stdout, msg,
    print >>sys.stdout
    sys.stdout.flush()

def version():
    '''Print version and exits'''
    log('fuzzbuzz version :', VERSION)
    sys.exit(error_codes['version'])

def usage(code=None):
    '''Prints the usage and exits with an error code specified by code. If code
    is not given it exits with error_codes['usage']'''
    log(usage_message)
    if code is None:
        log(extended_message)
        code = error_codes['usage']
    sys.exit(code)

def list_engines():
    for name, engine in fuzzbuzz.engines.fuzzers.iteritems():
        output(name, ':', engine['description'])
    sys.exit(error_codes['list_engines'])

def assert_file_exists(path):
    '''checks if the file exists. If it doesn't causes the program to exit.
    @param path : path to file
    @returns : the path to the file (an echo) [only on success]
    '''
    path = os.path.abspath(path)
    if not os.path.exists(path):
        log('No file found. "%(path)s"' % locals())
        usage(error_codes['file_not_found'])
    return path

def assert_dir_exists(path):
    '''checks if a directory exists. if not it creates it. if something exists
    and it is not a directory it exits with an error.
    '''
    path = os.path.abspath(path)
    if not os.path.exists(path):
        os.mkdir(path)
    elif not os.path.isdir(path):
        log('Expected a directory found a file. "%(path)s"' % locals())
        usage(error_codes['file_instead_of_dir'])
    return path

def read_file_or_die(path):
    '''Reads the file, if there is an error it kills the program.
    @param path : the path to the file
    @returns string : the contents of the file
    '''
    try:
        f = open(path, 'r')
        s = f.read()
        f.close()
    except Exception:
        log('Error reading file at "%s".' % path)
        usage(error_codes['bad_file_read'])
    return s

def parse_bool(s):
    '''parses s to check it is in [true, false]. returns the appropriate
    bool. If it isn't a book prints error and exits.
    @param s : a string
    @returns bool
    '''
    bools = {'true':True, 'false':False}
    if s not in bools:
        log('Expected bool found "%s"' % (s))
        log('You probably want %s case matters' % str(bools.keys()))
        usage(error_codes['bad_bool'])
    return bools[s]

def import_module_or_die(module):
    '''Imports a module as given by a string
    @param module : "A.x.b" --> from A.x import b
    @returns : the module requested (dies otherwise)
    '''
    fromlist = module.split('.')[:-1]
    try:
        return __import__(module, fromlist=fromlist)
    except ImportError:
        log("Could not import", module)
        usage(error_codes['bad_module'])

def main(args):

    try:
        opts, args = getopt(
            args,
            'hvg:r:e:Ex:t:',
            [
              'help', 'version', 'grammar=', 'reverse-lexer=', 'engine=',
              'list-engines', 'example=', 'table='
            ]
        )
    except GetoptError, err:
        log(err)
        usage(error_codes['option'])

    grammar = None
    lexer_module = None
    engine_name = 'attribute_fuzzer'
    examples = list()
    tables = list()
    for opt, arg in opts:
        if opt in ('-h', '--help'):
            usage()
        elif opt in ('-v', '--version'):
            version()
        elif opt in ('-g', '--grammar'):
            grammar = assert_file_exists(arg)
        elif opt in ('-r', '--reverse-lexer'):
            lexer_module = arg
        elif opt in ('-e', '--engine'):
            engine_name = arg
        elif opt in ('-E', '--list-engines'):
            list_engines()
        elif opt in ('-x', '--example'):
            examples.append(arg)
        elif opt in ('-t', '--table'):
            tables.append(arg)



    if engine_name is None:
        log("Must supply an engine name")
        usage(error_codes['requirements'])

    if grammar is None or lexer_module is None:
        log("Must supply both a grammar and a reverse lexer")
        usage(error_codes['requirements'])
    if engine_name not in fuzzbuzz.engines.fuzzers.keys():
        log("Engine name '%s' not found, use -E to get a list" % engine_name)
        usage(error_codes['bad_engine'])
    
    grammar = fuzzbuzz.frontend.parse(read_file_or_die(grammar))
    rlexer = import_module_or_die(lexer_module).stringifiers
    engine = fuzzbuzz.engines.fuzzers[engine_name]
    objs = locals()
    kwargs = dict((k, objs[v]) for k, v in engine['requires'].iteritems())
    strings = engine['function'](rlexer, grammar, **kwargs)
    string = ' '.join(strings)
    for line in string.split('\n'):
        output(line.strip())


if __name__ == '__main__':
    main(sys.argv[1:])
