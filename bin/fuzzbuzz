#!/usr/bin/env python
# -*- coding: utf-8 -*-
#Author: Tim Henderson
#Email: tim.tadh@hackthology.com
#For licensing see the LICENSE file in the top level directory.

import os, sys
import argparse

import fuzzbuzz

VERSION = 'git master'

def log(*msgs):
    for msg in msgs:
        print >>sys.stderr, msg,
    print >>sys.stderr
    sys.stderr.flush()

def assert_file_exists(path):
    '''checks if the file exists. If it doesn't causes the program to exit.
    @param path : path to file
    @returns : the path to the file (an echo) [only on success]
    '''
    path = os.path.abspath(path)
    if not os.path.exists(path):
        log('No file found. "%(path)s"' % locals())
    return path

def assert_dir_exists(path):
    '''checks if a directory exists. if not it creates it. if something exists
    and it is not a directory it exits with an error.
    '''
    path = os.path.abspath(path)
    if not os.path.exists(path):
        os.mkdir(path)
    elif not os.path.isdir(path):
        log('Expected a directory found a file. "%(path)s"' % locals())
    return path

def read_file_or_die(path):
    '''Reads the file, if there is an error it kills the program.
    @param path : the path to the file
    @returns string : the contents of the file
    '''
    try:
        f = open(path, 'r')
        s = f.read()
        f.close()
    except Exception:
        log('Error reading file at "%s".' % path)
    return s

def main():
    parser = argparse.ArgumentParser(description='FuzzBuzz: An attribute grammar fuzzer (Read the README)')
    parser.add_argument('-v', '--version', action='version', version=VERSION, help='print the version')
    parser.add_argument('grammar_file', metavar='grammar_file', type=str,
                        help='The grammar for which we will fuzz')

    args = parser.parse_args()

    grammar = assert_file_exists(args.grammar_file)

    if grammar is not None:
        grammar = fuzzbuzz.engine.generate(read_file_or_die(grammar))

    conf = {'grammar': grammar,
    }

    output(conf)

if __name__ == '__main__':
    main()
