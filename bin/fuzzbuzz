#!/usr/bin/env python
# -*- coding: utf-8 -*-
#Author: Tim Henderson
#Email: tim.tadh@hackthology.com
#For licensing see the LICENSE file in the top level directory.

import os, sys
from getopt import getopt, GetoptError

import fuzzbuzz

VERSION = 'git master'

error_codes = {
    'usage':1,
    'file_not_found':2,
    'option':3,
    'args':4,
    'version':5,
    'bad_bool':6,
    'no_args':7,
    'requirements':8,
    'bad_module':9,
    'list_engines':10,
    'file_instead_of_dir':11,
    'bad_engine':12,
    'engine_fail': 13,
    'bad_table_name': 14,
    'no_example': 15,
    'bad_lexer':16,
    'bad_rlexer':17,
}

usage_message = \
'''usage: fuzzbuzz -g <file> -r <module> [Extra Options]'''

extended_message = \
'''
Options

    -h, help                            print this message
    -v, version                         print the version
    -g, grammar=<file>                  supply an attribute grammar to fuzz
    -r, reverse-lexer=<module>          supply the module (on PYTHONPATH) which
                                        contains a reverse lexer for the given
                                        grammar (Note: the dictionary of
                                        functions must be called 'rlexer')
    -l, lexer=<module>                  supply the module (on PYTHONPATH) which
                                        contains a ply-based lexer for the given
                                        grammar (Note: the lexer class must be
                                        called 'Lexer')
    -e, engine=<engine-name>            what engine should be used
                                        [defaults to "attribute_fuzzer"]
    -E, list-engines                    list the available engines
    -x, example=<file>                  Supply an example (may be used many
                                        times)
    -t, table=<table-spec>              Supply a statistics table (may be used
                                        many times)
    -T, list-table-names                List table names the given engine
                                        expects

Specs
    <file> = a path to a file
    <module> = "a.x.b" a fully qualified import path of a module. Must be on the
               PYTHONPATH. Can be relative to the current working directory
    <engine-name> = A name of the an engine. Use -E to get a list.
    <table-spec> = <name>:<file>
    <name> = a unique string. can be anything. (no spaces allowed)
'''


def log(*msgs):
    for msg in msgs:
        print >>sys.stderr, msg,
    print >>sys.stderr
    sys.stderr.flush()

def output(*msgs):
    for msg in msgs:
        print >>sys.stdout, msg,
    print >>sys.stdout
    sys.stdout.flush()

def version():
    '''Print version and exits'''
    log('fuzzbuzz version :', VERSION)
    sys.exit(error_codes['version'])

def usage(code=None):
    '''Prints the usage and exits with an error code specified by code. If code
    is not given it exits with error_codes['usage']'''
    log(usage_message)
    if code is None:
        log(extended_message)
        code = error_codes['usage']
    sys.exit(code)

def list_engines():
    for name, engine in fuzzbuzz.engines.registration:
        output(name, ':', engine['description'])
    sys.exit(error_codes['list_engines'])

def assert_file_exists(path):
    '''checks if the file exists. If it doesn't causes the program to exit.
    @param path : path to file
    @returns : the path to the file (an echo) [only on success]
    '''
    path = os.path.abspath(os.path.expanduser(path))
    if not os.path.exists(path):
        log('No file found. "%(path)s"' % locals())
        usage(error_codes['file_not_found'])
    return path

def assert_dir_exists(path):
    '''checks if a directory exists. if not it creates it. if something exists
    and it is not a directory it exits with an error.
    '''
    path = os.path.abspath(path)
    if not os.path.exists(path):
        os.mkdir(path)
    elif not os.path.isdir(path):
        log('Expected a directory found a file. "%(path)s"' % locals())
        usage(error_codes['file_instead_of_dir'])
    return path

def read_file_or_die(path):
    '''Reads the file, if there is an error it kills the program.
    @param path : the path to the file
    @returns string : the contents of the file
    '''
    path = assert_file_exists(path)
    try:
        f = open(path, 'r')
        s = f.read()
        f.close()
    except Exception:
        log('Error reading file at "%s".' % path)
        usage(error_codes['bad_file_read'])
    return s

def parse_bool(s):
    '''parses s to check it is in [true, false]. returns the appropriate
    bool. If it isn't a book prints error and exits.
    @param s : a string
    @returns bool
    '''
    bools = {'true':True, 'false':False}
    if s not in bools:
        log('Expected bool found "%s"' % (s))
        log('You probably want %s case matters' % str(bools.keys()))
        usage(error_codes['bad_bool'])
    return bools[s]

def import_module_or_die(module):
    '''Imports a module as given by a string
    @param module : "A.x.b" --> from A.x import b
    @returns : the module requested (dies otherwise)
    '''
    fromlist = module.split('.')[:-1]
    try:
        return __import__(module, fromlist=fromlist)
    except ImportError:
        log("Could not import", module)
        usage(error_codes['bad_module'])

def parse_csv_or_die(tables, table_name, s):
    '''Parses string in a gramstats output format, if there is an error it kills the program.
    @param tables : the table we are storing info inside
    @param table_name : the name of the table/csv we are parsing
    @param s : the string we are parsing into a tuple of tuples
    '''

    if table_name in tables:
        log("Supplied multiple tables with same name '%s'" % table_name)
        usage(error_codes['bad_table_name'])
    table = tuple(
      tuple(col.strip() for col in row.split(','))
      for row in s.split('\n') if row
    )
    tables[table_name] = table

def main(args):

    short_opts =  'hvg:r:l:e:Ex:t:Ts:'
    long_opts = [
      'help', 'version', 'grammar=', 'reverse-lexer=', 'lexer=', 'engine=',
      'list-engines', 'example=', 'table=', 'list-table-names', 'stdin='
    ]

    try:
        opts, args = getopt(args, short_opts, long_opts)
    except GetoptError, err:
        log(err)
        usage(error_codes['option'])

    grammar = None
    lexer_module = None
    lexer_class = None
    rlexer_module = None
    engine_name = 'attribute_fuzzer'
    examples = list()
    tables = dict()
    table_names_requested = False
    stdin_opt = None
    for opt, arg in opts:
        if opt in ('-h', '--help'):
            usage()
        elif opt in ('-v', '--version'):
            version()
        elif opt in ('-g', '--grammar'):
            grammar = assert_file_exists(arg)
        elif opt in ('-r', '--reverse-lexer'):
            rlexer_module = import_module_or_die(arg)
        elif opt in ('-l', '--lexer'):
            lexer_module = import_module_or_die(arg)
        elif opt in ('-e', '--engine'):
            engine_name = arg
        elif opt in ('-E', '--list-engines'):
            list_engines()
        elif opt in ('-x', '--example'):
            examples.append(read_file_or_die(arg))
        elif opt in ('-T', '--list-table-names'):
            table_names_requested = True
        elif opt in ('-t', '--table'):
            tableinfo = arg.split(":") #table name, table path
            table_name = tableinfo[0]
            s = read_file_or_die(tableinfo[1])
            parse_csv_or_die(tables, table_name, s)
        elif opt in ('-s', '--stdin'):
            sops = short_opts.replace(':', '')
            lops = [opt.replace('=', '') for opt in long_opts]
            if arg not in sops and arg not in lops:
                log("'%s' supplied to -s (or --stdin) is not a valid opt" % arg)
                usage(error_codes['option'])
            if stdin_opt is not None:
                log("'%s' can only supplied -s (or --stdin) once")
                usage(error_codes['option'])
            stdin_opt = arg

    if engine_name is None:
        log("Must supply an engine name")
        usage(error_codes['requirements'])

    if grammar is None or rlexer_module is None:
        log("Must supply both a grammar and a reverse lexer")
        usage(error_codes['requirements'])

    if engine_name not in fuzzbuzz.engines.registration:
        log("Engine name '%s' not found, use -E to get a list" % engine_name)
        usage(error_codes['bad_engine'])

    if not hasattr(rlexer_module, 'rlexer'):
        log("rlexer module is invalid; must contain a dict 'rlexer'")
        usage(error_codes['bad_rlexer'])

    if lexer_module is not None:
        if not hasattr(lexer_module, 'Lexer'):
            log("Lexer module is invalid; must contain a class 'Lexer'")
            usage(error_codes['bad_lexer'])
        else:
            lexer_class = lexer_module.Lexer

    grammar = fuzzbuzz.frontend.parse(read_file_or_die(grammar))
    rlexer = rlexer_module.rlexer
    engine = fuzzbuzz.engines.registration[engine_name]
    objs = locals()
    kwargs = dict((k, objs[v]) for k, v in engine['requires'].iteritems())

    strings, err = engine['function'](rlexer, grammar, **kwargs)
    if err:
        log(err)
        usage(error_codes['engine_fail'])

    strings = map(str, strings)
    string = ' '.join(strings)
    for line in string.split('\n'):
        output(line.strip())


if __name__ == '__main__':
    main(sys.argv[1:])
