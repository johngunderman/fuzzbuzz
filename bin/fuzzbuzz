#!/usr/bin/env python
# -*- coding: utf-8 -*-
#Author: Tim Henderson
#Email: tim.tadh@hackthology.com
#For licensing see the LICENSE file in the top level directory.

import os, sys
from getopt import getopt, GetoptError

import fuzzbuzz

VERSION = 'git master'

error_codes = {
    'usage':1,
    'file_not_found':2,
    'option':3,
    'args':4,
    'version':5,
    'bad_bool':6,
    'no_args':7,
    'file_instead_of_dir':11,
}

usage_message = \
'''usage: fuzzbuzz [Options]'''

extended_message = \
'''
Options

    -h, help                            print this message
    -v, version                         print the version
    -g, grammar=<file>                  supply a known grammar to annotate
'''


def log(*msgs):
    for msg in msgs:
        print >>sys.stderr, msg,
    print >>sys.stderr
    sys.stderr.flush()

def output(*msgs):
    for msg in msgs:
        print >>sys.stdout, msg,
    print >>sys.stdout
    sys.stdout.flush()

def version():
    '''Print version and exits'''
    log('fuzzbuzz version :', VERSION)
    sys.exit(error_codes['version'])

def usage(code=None):
    '''Prints the usage and exits with an error code specified by code. If code
    is not given it exits with error_codes['usage']'''
    log(usage_message)
    if code is None:
        log(extended_message)
        code = error_codes['usage']
    sys.exit(code)

def assert_file_exists(path):
    '''checks if the file exists. If it doesn't causes the program to exit.
    @param path : path to file
    @returns : the path to the file (an echo) [only on success]
    '''
    path = os.path.abspath(path)
    if not os.path.exists(path):
        log('No file found. "%(path)s"' % locals())
        usage(error_codes['file_not_found'])
    return path

def assert_dir_exists(path):
    '''checks if a directory exists. if not it creates it. if something exists
    and it is not a directory it exits with an error.
    '''
    path = os.path.abspath(path)
    if not os.path.exists(path):
        os.mkdir(path)
    elif not os.path.isdir(path):
        log('Expected a directory found a file. "%(path)s"' % locals())
        usage(error_codes['file_instead_of_dir'])
    return path

def read_file_or_die(path):
    '''Reads the file, if there is an error it kills the program.
    @param path : the path to the file
    @returns string : the contents of the file
    '''
    try:
        f = open(path, 'r')
        s = f.read()
        f.close()
    except Exception:
        log('Error reading file at "%s".' % path)
        usage(error_codes['bad_file_read'])
    return s

def parse_bool(s):
    '''parses s to check it is in [true, false]. returns the appropriate
    bool. If it isn't a book prints error and exits.
    @param s : a string
    @returns bool
    '''
    bools = {'true':True, 'false':False}
    if s not in bools:
        log('Expected bool found "%s"' % (s))
        log('You probably want %s case matters' % str(bools.keys()))
        usage(error_codes['bad_bool'])
    return bools[s]

def main(args):

    try:
        opts, args = getopt(
            args,
            'hvg:',
            [
              'help', 'version', 'grammar='
            ]
        )
    except GetoptError, err:
        log(err)
        usage(error_codes['option'])

    grammar = None
    for opt, arg in opts:
        if opt in ('-h', '--help'):
            usage()
        elif opt in ('-v', '--version'):
            version()
        elif opt in ('-g', '--grammar'):
            grammar = assert_file_exists(arg)

    if grammar is not None:
        grammar = lib.parse_grammar(read_file_or_die(grammar))

    conf = {'grammar': grammar,
    }

    output(conf)

if __name__ == '__main__':
    main(sys.argv[1:])
